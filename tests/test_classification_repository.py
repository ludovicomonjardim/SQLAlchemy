import pytest
from sqlalchemy.exc import IntegrityError
from repositories.classification_repository import ClassificationRepository
from models.classification import Classification
from models.movie import Movie
from database import initialize_database, get_session


@pytest.fixture(scope="function")
def session():
    """Cria uma sess√£o tempor√°ria para os testes e garante rollback ao final."""
    initialize_database()
    session = get_session()
    yield session
    session.rollback()  # üîπ Reverte todas as altera√ß√µes feitas no teste
    session.close()


@pytest.fixture(scope="function")
def classification_repo(session):
    """Instancia o reposit√≥rio de classifica√ß√µes para os testes."""
    return ClassificationRepository()


def test_insert_classification(classification_repo, session):
    """Testa a inser√ß√£o de uma classifica√ß√£o et√°ria garantindo que n√£o exista duplica√ß√£o."""

    # üîπ Remove a classifica√ß√£o caso j√° exista
    session.query(Classification).filter_by(name="Livre").delete(synchronize_session=False)
    session.commit()

    # üîπ Insere uma nova classifica√ß√£o
    classification_data = {
        "name": "Livre",
        "description": "Permitido para todos os p√∫blicos",
        "min_age": 0
    }
    classification_repo.insert(classification_data)

    # üîπ Verifica se a inser√ß√£o foi bem-sucedida
    inserted_classification = session.query(Classification).filter_by(name="Livre").first()
    assert inserted_classification is not None
    assert inserted_classification.description == "Permitido para todos os p√∫blicos"
    assert inserted_classification.min_age == 0


def test_update_classification(classification_repo, session):
    """Testa a atualiza√ß√£o de uma classifica√ß√£o et√°ria garantindo que n√£o haja conflitos."""

    # üîπ Remove qualquer classifica√ß√£o existente com os nomes do teste
    session.query(Classification).filter(Classification.name.in_(["Livre", "Sem Restri√ß√£o"])).delete(synchronize_session=False)
    session.commit()

    # üîπ Insere uma classifica√ß√£o com um nome √∫nico
    classification_repo.insert({"name": "Livre", "description": "Permitido para todos os p√∫blicos", "min_age": 0})
    inserted_classification = session.query(Classification).filter_by(name="Livre").first()

    # üîπ Atualiza o nome da classifica√ß√£o
    classification_repo.update(where={"id": inserted_classification.id}, with_={"name": "Sem Restri√ß√£o"})
    session.expire_all()
    updated_classification = session.query(Classification).filter_by(id=inserted_classification.id).first()

    # üîπ Valida se o nome foi atualizado corretamente
    assert updated_classification.name == "Sem Restri√ß√£o"


def test_delete_classification(classification_repo, session):
    """Testa a remo√ß√£o de uma classifica√ß√£o et√°ria sem associa√ß√µes."""

    # üîπ Remove qualquer res√≠duo de testes anteriores
    session.query(Classification).filter_by(name="18 anos").delete(synchronize_session=False)
    session.commit()

    # üîπ Insere a classifica√ß√£o e verifica se existe
    classification_repo.insert({"name": "18 anos", "description": "Somente para maiores de idade", "min_age": 18})
    inserted_classification = session.query(Classification).filter_by(name="18 anos").first()
    assert inserted_classification is not None

    # üîπ Exclui a classifica√ß√£o e verifica se foi removida
    classification_repo.delete(where={"id": inserted_classification.id})
    deleted_classification = session.query(Classification).filter_by(id=inserted_classification.id).first()
    assert deleted_classification is None


def test_unique_constraint(classification_repo, session):
    """Testa a restri√ß√£o de unicidade no nome da classifica√ß√£o."""

    # üîπ Remove a classifica√ß√£o se j√° existir para garantir um teste limpo
    session.query(Classification).filter_by(name="16 anos").delete(synchronize_session=False)
    session.commit()

    # üîπ Insere a classifica√ß√£o pela primeira vez (deve ter sucesso)
    result1 = classification_repo.insert({"name": "16 anos", "description": "N√£o recomendado para menores de 16 anos", "min_age": 16})
    assert result1["success"] is True, f"Falha na primeira inser√ß√£o: {result1['error']}"

    # üîπ Tenta inserir a mesma classifica√ß√£o novamente (deve falhar)
    result2 = classification_repo.insert({"name": "16 anos", "description": "N√£o recomendado para menores de 16 anos", "min_age": 16})

    assert result2["success"] is False, "A inser√ß√£o duplicada deveria falhar, mas foi bem-sucedida."
    assert "Viola√ß√£o de integridade" in result2["error"], f"Erro inesperado: {result2['error']}"


def test_delete_classification_with_movie(classification_repo, session):
    """Testa a remo√ß√£o de uma classifica√ß√£o que est√° associada a um filme."""

    # üîπ Insere uma classifica√ß√£o e verifica se existe
    classification_repo.insert({"name": "12 anos", "description": "N√£o recomendado para menores de 12 anos", "min_age": 12})
    inserted_classification = session.query(Classification).filter_by(name="12 anos").first()

    # üîπ Associa a classifica√ß√£o a um filme
    session.add(Movie(title="Filme Teste", year=2023, duration=120, classification_id=inserted_classification.id, rating=8, active=True))
    session.commit()

    # üîπ Tenta excluir a classifica√ß√£o associada a um filme
    result = classification_repo.delete({"id": inserted_classification.id})

    assert result["success"] is False
    assert "pois est√° associada a" in result["error"]  # Corrigida a verifica√ß√£o da mensagem de erro
