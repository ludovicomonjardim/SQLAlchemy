"""
repositories/classification_repository.py
Este m√≥dulo cont√©m a classe ClassificationRepository, respons√°vel por interagir com a tabela de classifica√ß√µes no banco de dados.
"""

from repositories.crud_base_repository import CrudBaseRepository
from models.classification import Classification
from models.movie import Movie
from utils.session import session_manager


class ClassificationRepository(CrudBaseRepository):
    """
    Classe respons√°vel por opera√ß√µes espec√≠ficas relacionadas ao modelo Classification no banco de dados.
    Herda m√©todos gen√©ricos de CrudBaseRepository e implementa funcionalidades espec√≠ficas, como relat√≥rios e exclus√£o.
    """
    model = Classification

    @staticmethod
    @session_manager(commit=False)  # Apenas leitura, sem commit
    def report(session):
        """
        Exibe todas as classifica√ß√µes cadastradas no banco de dados.
        - A fun√ß√£o recebe uma sess√£o do banco de dados como argumento.
        - Consulta todos os registros da tabela 'Classification'.
        - Se houver classifica√ß√µes, exibe-as em um formato tabular.
        - Caso contr√°rio, informa que nenhuma classifica√ß√£o foi encontrada.
        """
        classifications = session.query(Classification).all()
        if classifications:
            print("-" * 80)
            print(f"{'ID':<5} {'Nome':<20} {'Descri√ß√£o':<40} {'Idade M√≠nima':<10}")
            print("-" * 80)
            for classification in classifications:
                print(
                    f"{classification.id:<5} {classification.name:<20} {classification.description:<40} {classification.min_age:<10}")
        else:
            print("Nenhuma classifica√ß√£o encontrada na tabela.")

    @session_manager(commit=True)  # D√° commit, pois altera dados
    def delete(self, where, session):
        """
        Exclui uma ou mais classifica√ß√µes apenas se n√£o estiverem associadas a filmes.
        - `where` pode ser um dicion√°rio (exclus√£o √∫nica) ou uma lista de filtros (exclus√£o m√∫ltipla).
        - Retorna um dicion√°rio indicando sucesso ou falha da opera√ß√£o.
        """

        if not where:
            return {"success": False, "error": "Erro: Nenhum crit√©rio de exclus√£o fornecido."}

        try:
            if isinstance(where, dict):
                classification_to_delete = session.query(Classification).filter_by(**where).first()
                if not classification_to_delete:
                    return {"success": False, "error": "Erro: Classifica√ß√£o n√£o encontrada."}

                # üîπ Verifica se h√° filmes associados
                associated_movies = session.query(Movie).filter(
                    Movie.classification_id == classification_to_delete.id).count()
                if associated_movies > 0:
                    return {"success": False,
                            "error": f"Erro: N√£o √© poss√≠vel excluir '{classification_to_delete.name}', pois est√° associada a {associated_movies} filme(s)."}

                # Prossegue com a exclus√£o se n√£o houver filmes associados
                result = super().delete(where)
                if not result["success"]:
                    return result

                return {"success": True,
                        "message": f"Classifica√ß√£o '{classification_to_delete.name}' removida com sucesso."}

            elif isinstance(where, list):
                # üîπ Verifica se alguma das classifica√ß√µes na lista est√° associada a filmes
                classifications_to_delete = session.query(Classification).filter(*where).all()
                for classification in classifications_to_delete:
                    associated_movies = session.query(Movie).filter(Movie.classification_id == classification.id).count()
                    if associated_movies > 0:
                        return {"success": False,
                                "error": f"Erro: N√£o √© poss√≠vel excluir '{classification.name}', pois est√° associada a {associated_movies} filme(s)."}

                # Prossegue com a exclus√£o se nenhuma classifica√ß√£o estiver associada a filmes
                query = session.query(Classification).filter(*where)
                deleted_count = query.delete(synchronize_session=False)

                if deleted_count == 0:
                    return {"success": False, "error": "Nenhuma classifica√ß√£o encontrada para exclus√£o."}

                return {"success": True, "deleted_count": deleted_count}

            else:
                return {"success": False,
                        "error": "Erro: O par√¢metro `where` deve ser um dicion√°rio ou uma lista de filtros."}

        except Exception as e:
            return {"success": False, "error": f"Erro ao excluir registros: {e}"}
